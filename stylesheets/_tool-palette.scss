// ==========================================================================
// COLOR PALETTE FUNCTION
// ==========================================================================

@import "tool-parse-color";
@import "tool-map-deep-get-set";
@import "tool-map-get-if-exists";

// Generates color values for other modules.
//
// Grabs the Sass source map $palette and gets color value from color key.
//
// Example:
//
// a {
//     color: palette(yellow, light);
// }
//
// The map variable can be set in config/colors/
//

/*doc
---
title: Colour palettes
name: colors
category: config
---

Colors are accessed via the `palette()` function, with the tone as the second (optional) parameter, like so:

`.widget {
    color: palette(grey, dark);
}`

Standard colours (white and black) should be referenced directly without the palette function like `.widget { color: black; }`

```html_example
<div data-styleguide-palette></div>
*/

@function map-get-if-exists($map, $key){
    @if map-has-key($map, $key) {
        @return map-get($map, $key);
    }
    @else {
        @error "#{$map} has no key named '#{$key}'";
    }
}


$__palettes: () !global;

@mixin load-palette($palettes-map) {
  @each $palette, $shades in $palettes-map {
      @each $shade, $value in $shades {
          $parsed: parse-color($value);
          $parsed: $value;
          $palettes-map: map-deep-set($palettes-map, $palette $shade, $parsed);
      }
  }

  $__palettes: $palettes-map !global;
}


@function palette($color, $tone: 'base') {
    $color: quote($color);

    $palette: map-get-if-exists($__palettes, $color);
    $value: map-get-if-exists($palette, $tone);

    @return #{$value};
}

// @TODO how to load this when using eyeglass? via fn call?
// @import "../../config/palettes.yml";
@include load-palette($palettes);
