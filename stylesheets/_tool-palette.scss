// ==========================================================================
// COLOR PALETTE FUNCTION
// ==========================================================================

@import "~@mise-en-place/tools.parse-color";
@import "~@mise-en-place/tools.map-deep-get-set";
@import "~@mise-en-place/tools.map-get-if-exists";

/*doc
---
title: Colour palette
name: colors
category: config
---

Colors are accessed via the `palette()` function, with the tone as the second (optional) parameter, like so:

```
.widget {
    color: palette(grey, dark);
}`
```
Standard colours (white and black) should be referenced directly without the palette function like `.widget { color: black; }`

Before using you need to call `load-palette()`, passing a map of the colours to load.
```html_example
<div data-styleguide-palette></div>
```

**NB** You need to call `@include load-palette($palettes);` in your main Sass file to load the palette before using this fn.

*/

@function map-get-if-exists($map, $key){
    @if map-has-key($map, $key) {
        @return map-get($map, $key);
    }
    @else {
        @error "#{$map} has no key named '#{$key}'";
    }
}

$__palette: () !default  !global;

@mixin load-palette($palette-map) {
  @each $palette, $shades in $palette-map {
      @each $shade, $value in $shades {
          $parsed: parse-color($value);

          $palette-map: map-deep-set($palette-map, $palette $shade, $parsed);
      }
  }

  $__palette: $palette-map !global;
}


@function palette($color, $tone: 'base') {
    $color: quote($color);

    $palette: map-get-if-exists($__palette, $color);
    $value: map-get-if-exists($palette, $tone);

    @return parse-color($value);
}

@function get-palette() {
    @return $__palette;
}
